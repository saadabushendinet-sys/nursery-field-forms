
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>نموذج جمع البذور الميداني</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
    <style>
        body { font-family: 'Tajawal', sans-serif; }
        @import url('https://fonts.googleapis.com/css2?family=Tajawal:wght@400;500;700&display=swap');
        [disabled] { cursor: not-allowed; opacity: 0.7; }
    </style>
</head>
<body class="bg-gray-100">
    <div class="container mx-auto p-4 max-w-2xl">
        <div id="sync-status" class="fixed top-0 left-0 right-0 p-2 text-center text-white z-50 transition-colors duration-500"></div>
        
        <header class="text-center mb-6">
            <h1 class="text-3xl font-bold text-gray-800">نموذج جمع البذور الميداني</h1>
            <p class="text-gray-600 mt-2">يرجى تعبئة الحقول التالية بدقة. سيتم حفظ البيانات تلقائياً ومزامنتها عند توفر اتصال بالإنترنت.</p>
        </header>

        <main class="bg-white p-6 rounded-lg shadow-md">
            <form id="collection-form" class="space-y-6">
                <!-- Form fields will be dynamically inserted here -->
            </form>
             <div class="mt-8 flex justify-end">
                <button type="submit" form="collection-form" class="px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                    حفظ وإرسال
                </button>
            </div>
        </main>
        
        <footer class="text-center mt-8 text-gray-500 text-sm">
            <p>نموذج ميداني مدعوم من نظام المشتل.</p>
            <p>عدد السجلات في قائمة الانتظار: <span id="queue-count">0</span></p>
        </footer>
    </div>

    <script>
        // --- CONFIGURATION (REPLACED BY GENERATOR) ---
        const SUPABASE_URL = "https://taodxqtlkyhkupktliwv.supabase.co";
        const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRhb2R4cXRsa3loa3Vwa3RsaXd2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxMDkxMjUsImV4cCI6MjA3NDY4NTEyNX0.3_Lolpx49GZJAai8I5qQRHpD8fXnuOGKJKEhHmXH9Ps";
        const FORM_CONFIG = {
  "staticData": {
    "plant_id": "8b543a10-f38b-484c-890e-06f5a001804a",
    "barcode_id": "BRC-1759575803145",
    "scientific_name": "olive",
    "plant_type": "زيتون"
  },
  "fields": [
    {
      "id": "quantity",
      "type": "number",
      "label": "الكمية",
      "required": true,
      "placeholder": "e.g., 5.2"
    },
    {
      "id": "unit",
      "type": "select",
      "label": "الوحدة",
      "required": true,
      "options": [
        "kg",
        "g",
        "count"
      ]
    },
    {
      "id": "quality",
      "type": "select",
      "label": "الجودة",
      "required": true,
      "options": [
        "ممتاز",
        "جيد جداً",
        "جيد",
        "متوسط",
        "ضعيف"
      ]
    },
    {
      "id": "collection_date",
      "type": "date",
      "label": "تاريخ الجمع",
      "required": true,
      "value": "2025-10-05"
    },
    {
      "id": "collection_time",
      "type": "time",
      "label": "وقت الجمع",
      "required": true,
      "value": "23:13"
    },
    {
      "id": "location",
      "type": "text",
      "label": "اسم الموقع",
      "required": true
    },
    {
      "id": "collector",
      "type": "text",
      "label": "اسم الجامع",
      "required": true
    },
    {
      "id": "notes",
      "type": "textarea",
      "label": "ملاحظات"
    }
  ]
};
        // --- END CONFIGURATION ---

        const { createClient } = supabase;
        const supabaseClient = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        const form = document.getElementById('collection-form');
        const syncStatusEl = document.getElementById('sync-status');
        const queueCountEl = document.getElementById('queue-count');
        const SUBMISSION_QUEUE_KEY = 'submissionQueue-' + FORM_CONFIG.staticData.barcode_id;

        function getQueue() {
            return JSON.parse(localStorage.getItem(SUBMISSION_QUEUE_KEY) || '[]');
        }

        function saveQueue(queue) {
            localStorage.setItem(SUBMISSION_QUEUE_KEY, JSON.stringify(queue));
            updateQueueCount();
        }

        function updateQueueCount() {
            queueCountEl.textContent = getQueue().length;
        }

        function showStatus(message, isError = false) {
            syncStatusEl.textContent = message;
            syncStatusEl.className = `fixed top-0 left-0 right-0 p-2 text-center text-white z-50 transition-colors duration-500 ${isError ? 'bg-red-500' : 'bg-green-500'}`;
            setTimeout(() => {
                syncStatusEl.className = 'fixed top-0 left-0 right-0 p-2 text-center text-white z-50 transition-colors duration-500';
                syncStatusEl.textContent = '';
            }, 5000);
        }

        async function syncSubmissions() {
            if (!navigator.onLine) {
                showStatus('غير متصل بالإنترنت. سيتم المزامنة لاحقاً.', true);
                return;
            }

            const queue = getQueue();
            if (queue.length === 0) {
                // Do not show a message if the queue is empty on initial load.
                return;
            }

            showStatus(`جاري مزامنة ${queue.length} سجل...`);

            const { data, error } = await supabaseClient.from('seed_collections').insert(queue);

            if (error) {
                console.error('Sync error:', error);
                showStatus(`فشل المزامنة: ${error.message}`, true);
            } else {
                showStatus('تمت المزامنة بنجاح!');
                localStorage.removeItem(SUBMISSION_QUEUE_KEY);
                updateQueueCount();
            }
        }

        function createField(field) {
            const wrapper = document.createElement('div');
            const label = document.createElement('label');
            label.textContent = field.label;
            label.className = 'block text-sm font-medium text-gray-700 mb-1';
            label.htmlFor = field.id;
            wrapper.appendChild(label);
            
            let input;
            if (field.type === 'select') {
                input = document.createElement('select');
                field.options.forEach(opt => {
                    const option = document.createElement('option');
                    option.value = opt;
                    option.textContent = opt;
                    input.appendChild(option);
                });
            } else if (field.type === 'textarea') {
                input = document.createElement('textarea');
                input.rows = 3;
            } else {
                input = document.createElement('input');
                input.type = field.type;
            }
            
            input.id = field.id;
            input.name = field.id;
            input.className = 'w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500';
            if (field.required) input.required = true;
            if (field.placeholder) input.placeholder = field.placeholder;
            if (field.value) input.value = field.value;
            if (field.disabled) input.disabled = true;

            wrapper.appendChild(input);
            return wrapper;
        }

        function renderForm() {
            FORM_CONFIG.fields.forEach(field => {
                form.appendChild(createField(field));
            });
        }

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            const formData = new FormData(form);
            const submission = {};
            // Collect dynamic data from form fields
            FORM_CONFIG.fields.forEach(field => {
                if (!field.disabled) {
                    submission[field.id] = formData.get(field.id);
                }
            });
            
            // Add static data (non-form fields)
            Object.assign(submission, FORM_CONFIG.staticData);
            
            // Rename keys to match DB snake_case
            const dbRecord = {};
            for (const key in submission) {
                const snakeKey = key.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
                dbRecord[snakeKey] = submission[key];
            }
            
            const queue = getQueue();
            queue.push(dbRecord);
            saveQueue(queue);

            showStatus('تم حفظ السجل بنجاح. سيتم إرساله عند توفر اتصال.');
            
            // Reset only non-disabled fields
             FORM_CONFIG.fields.forEach(field => {
                if (!field.disabled) {
                   const el = document.getElementById(field.id);
                   if(el) el.value = field.type === 'select' ? field.options[0] : '';
                }
            });
            syncSubmissions();
        });

        // --- INITIALIZATION ---
        window.addEventListener('online', syncSubmissions);
        renderForm();
        updateQueueCount();
        setTimeout(syncSubmissions, 1000); // Attempt sync shortly after load
    </script>
</body>
</html>
